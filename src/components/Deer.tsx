/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/Deer.gltf -o src/components/Deer.tsx -t -k --types 
*/

import * as THREE from "three";
import React from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";

type ActionName =
  | "Attack_Headbutt"
  | "Attack_Kick"
  | "Death"
  | "Eating"
  | "Gallop"
  | "Gallop_Jump"
  | "Idle"
  | "Idle_2"
  | "Idle_Headlow"
  | "Idle_HitReact1"
  | "Idle_HitReact2"
  | "Jump_toIdle"
  | "Walk";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.SkinnedMesh;
    Cube_1: THREE.SkinnedMesh;
    Cube_2: THREE.SkinnedMesh;
    Cube_3: THREE.SkinnedMesh;
    Cube_4: THREE.SkinnedMesh;
    Cube_5: THREE.SkinnedMesh;
    Cube_6: THREE.SkinnedMesh;
    Body: THREE.Bone;
    IKBackLegL: THREE.Bone;
    IKFrontLegL: THREE.Bone;
    IKBackLegR: THREE.Bone;
    IKFrontLegR: THREE.Bone;
  };
  materials: {
    Main: THREE.MeshStandardMaterial;
    Hooves: THREE.MeshStandardMaterial;
    Main_Light: THREE.MeshStandardMaterial;
    Main_Dark: THREE.MeshStandardMaterial;
    Eye_Lighter: THREE.MeshStandardMaterial;
    Eye_Black: THREE.MeshStandardMaterial;
    Eye_White: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type DeerProps = JSX.IntrinsicElements["group"] & {
  castShadow?: boolean;
  receiveShadow?: boolean;
};

export const Deer = React.forwardRef<THREE.Group, DeerProps>(
  ({ castShadow, receiveShadow, ...props }, ref) => {
    const group = React.useRef<THREE.Group>();
    const { scene, animations } = useGLTF("/models/Deer.gltf");
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes, materials } = useGraph(clone) as GLTFResult;
    const { actions } = useAnimations(animations, group);

    React.useImperativeHandle(ref, () => group.current!);

    return (
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="AnimalArmature">
            <primitive object={nodes.Body} />
            <primitive object={nodes.IKBackLegL} />
            <primitive object={nodes.IKFrontLegL} />
            <primitive object={nodes.IKBackLegR} />
            <primitive object={nodes.IKFrontLegR} />
            <group name="Deer">
              <skinnedMesh
                name="Cube"
                geometry={nodes.Cube.geometry}
                material={materials.Main}
                skeleton={nodes.Cube.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_1"
                geometry={nodes.Cube_1.geometry}
                material={materials.Hooves}
                skeleton={nodes.Cube_1.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_2"
                geometry={nodes.Cube_2.geometry}
                material={materials.Main_Light}
                skeleton={nodes.Cube_2.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_3"
                geometry={nodes.Cube_3.geometry}
                material={materials.Main_Dark}
                skeleton={nodes.Cube_3.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_4"
                geometry={nodes.Cube_4.geometry}
                material={materials.Eye_Lighter}
                skeleton={nodes.Cube_4.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_5"
                geometry={nodes.Cube_5.geometry}
                material={materials.Eye_Black}
                skeleton={nodes.Cube_5.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
              <skinnedMesh
                name="Cube_6"
                geometry={nodes.Cube_6.geometry}
                material={materials.Eye_White}
                skeleton={nodes.Cube_6.skeleton}
                castShadow={castShadow}
                receiveShadow={receiveShadow}
              />
            </group>
          </group>
        </group>
      </group>
    );
  }
);

useGLTF.preload("/models/Deer.gltf");
